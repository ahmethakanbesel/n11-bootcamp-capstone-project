version: '3.8'
services:
  solr:
    image: solr:9.5.0-slim
    ports:
      - "8983:8983"
      # volumes:
      #- ./data:/var/solr
    command:
      - solr-precreate
      - restaurants
  init-data:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./scripts:/scripts
    depends_on:
      - solr
    command: [ "sh", "/scripts/startup-local.sh" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
  redis:
    image: redis:7.2.3-alpine
    hostname: redis1
    container_name: redis1
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    restart: on-failure
  postgres:
    image: postgres:16-alpine
    hostname: postgres1
    container_name: postgres1
    environment:
      POSTGRES_DB: user-service
      POSTGRES_USER: user-service
      POSTGRES_PASSWORD: service_pass
    ports:
      - "5432:5432"
    volumes:
      - ./scripts/schema.sql:/docker-entrypoint-initdb.d/init.sql:ro
    #  - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    restart: on-failure
  test-database:
    image: postgres:16-alpine
    hostname: test-postgres1
    container_name: test-postgres1
    environment:
      POSTGRES_DB: user-service-test
      POSTGRES_USER: user-service
      POSTGRES_PASSWORD: service_pass
    ports:
      - "5433:5432"
  zoo1:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zoo1
volumes:
  postgres-data:
  data:
  scripts: